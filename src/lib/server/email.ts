'use server';

import * as nodemailer from 'nodemailer';
import dotenv from 'dotenv';

dotenv.config();

interface SendEmailParams {
    to: string;
    subject: string;
    html: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ –æ—Å–Ω–æ–≤–Ω–∏—è –ø–æ—Ä—Ç (SSL/TLS)
const primaryConfig = {
    host: process.env.SMTP_SERVER_HOST,
    port: Number(process.env.SMTP_SERVER_PORT || 465),
    secure: Number(process.env.SMTP_SERVER_PORT || 465) === 465,
    auth: {
        user: process.env.SMTP_SERVER_USER,
        pass: process.env.SMTP_SERVER_PASS,
    },
    tls: {
        rejectUnauthorized: false
    },
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∏—è –ø–æ—Ä—Ç (STARTTLS)
const fallbackConfig = {
    host: process.env.SMTP_SERVER_HOST,
    port: 587,
    secure: false, // false for STARTTLS
    auth: {
        user: process.env.SMTP_SERVER_USER,
        pass: process.env.SMTP_SERVER_PASS,
    },
    tls: {
        rejectUnauthorized: false
    },
};


export async function sendEmail({ to, subject, html }: SendEmailParams) {
    let transporter = nodemailer.createTransport(primaryConfig);
    const fromAddress = process.env.SMTP_FROM || process.env.SMTP_SENDER_EMAIL;

    try {
        const info = await transporter.sendMail({
            from: fromAddress,
            to,
            subject,
            html,
        });
        console.log("‚úÖ Email sent via primary config:", info.messageId);
        return info;
    } catch (error) {
        console.error(`‚ùå Send failed on port ${primaryConfig.port}:`, error);

        // –ê–∫–æ –ø—ä—Ä–≤–∏—è—Ç –æ–ø–∏—Ç –µ –±–∏–ª —Å –æ—Å–Ω–æ–≤–Ω–∏—è –ø–æ—Ä—Ç (465) –∏ –µ –Ω–µ—É—Å–ø–µ—à–µ–Ω, –æ–ø–∏—Ç–∞–π —Å —Ä–µ–∑–µ—Ä–≤–Ω–∏—è
        if (primaryConfig.port === 465) {
            console.log("üîÑ Retrying with port 587 (STARTTLS)...");
            transporter = nodemailer.createTransport(fallbackConfig);
            
            try {
                const fallbackInfo = await transporter.sendMail({
                    from: fromAddress,
                    to,
                    subject,
                    html,
                });
                console.log("‚úÖ Email sent via fallback config (port 587):", fallbackInfo.messageId);
                return fallbackInfo;
            } catch (fallbackError) {
                 console.error(`‚ùå Fallback send failed on port 587:`, fallbackError);
                 throw fallbackError; // –•–≤—ä—Ä–ª–∏ –≥—Ä–µ—à–∫–∞—Ç–∞ –æ—Ç –≤—Ç–æ—Ä–∏—è –æ–ø–∏—Ç
            }
        }

        throw error; // –•–≤—ä—Ä–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –≥—Ä–µ—à–∫–∞, –∞–∫–æ –æ—Å–Ω–æ–≤–Ω–∏—è—Ç –ø–æ—Ä—Ç –Ω–µ –µ 465
    }
}
